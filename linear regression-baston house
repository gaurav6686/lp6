Linear regression by using Deep Neural network: Implement Boston housing price prediction problem by network. 
Use Boston House price Prediction dataset.

if these not work see kaggle website for Boston 

import pandas as pd 
import numpy as np
from sklearn import metrics 
import matplotlib.pyplot as plt 
import seaborn as sns 
%matplotlib inline

from sklearn.datasets import fetch_openml 
boston=fetch openml(name="boston,version=1)

data pd.DataFrame(boston.data) 
data.head()

data.columns = boston.feature_names
data.head()

data['PRICE'] = boston.target

data.shape

data.columns

data.dtypes

data.nunique()

data.isnull().sum()

data[data.isnull().any(axis=1)]

data.describe()

corr = data.corr()

corr.shape

plt.figure(figsize=(20,20))
sns.heatmap(corr, char=True, square=True, fmt.lf, annot=True, annot_kws={"size":15}, cmap="Greens')

X = data.drop(['PRICE'], axis = 1)

y = data['PRICE']

from sklearn.model selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 4)

from sklearn.linear model import LinearRegression

lm = LinearRegression()

Im.fit(X_train, y_train)

lm.intercept

coeffcients = pd.DataFrame([X_train.columns,lm.coef]).T

coeffcients = coeffcients.rename(columns={0: Attribute, 1 Coefficients'))
coeffcients

y_pred model.predict(X_test)

mse_nn = mean_squared_error(y_test, y_pred_nn)

mae_nn mean absolute error(y_test, y_pred_nn)

print("Mean Squared Error:, mse_nn) 
print('Mean Absolute Error:, mae_nn)

